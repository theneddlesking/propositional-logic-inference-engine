Base:

~(p & q) <=> (~r || (q => s))
~((p & q) <=> (~r || (q => s)))

1:
(BICONDITIONALS)
(~(p & q) => (~r || (q => s))) & ((~r || (q => s)) => ~(p & q))

(~(p & q) => (~r || (q => s))) & ((~r || (q => s)) => ~(p & q))

(IMPLICATIONS)
((p & q) || (~r || (~q || s))) & (~(~r || (~q || s)) || ~(p & q))

((p & q) || (~r || ~q || s)) & (~(~r || ~q || s) || ~(p & q))
1.99999:
((p & q) || (~r || ~q || s)) & ((r & q & ~s) || ~(p & q))
((p & q) || (~r || ~q || s)) & ((r & q & ~s) || (~p || ~q))
((p & q) || (~r || ~q || s)) & ((r & q & ~s) || ~p || ~q)

2:
(DE MORGAN'S LAWS)
((p & q) || (~r || (~q || s))) & ((~~r & ~(~q || s)) || ~(p & q))
((p & q) || (~r || (~q || s))) & ((~~r & ~(~q || s)) || (~p || ~q))
((p & q) || (~r || (~q || s))) & ((~~r & (~~q & ~s)) || (~p || ~q))
(DOUBLE NEGATIONS) // Our implementation for literals doesn't know / care about double negations it just removes (unnegates) it
// We will need it for sentences though
// dO yOu SeE mY pOiNt???
((p & q) || (~r || (~q || s))) & ((r & (q & ~s)) || (~p || ~q))

2.5:
(GROUPING)

3:
(DISTRIBUTE DISJUNCTIONS OVER CONJUNCTIONS)
A || (B & C) === (A || B) & (A || C)

((~r || (~q || s)) || p) & ((~r || (~q || s)) || q) & ((r & (q & ~s)) || (~p || ~q))
((~r || (~q || s)) || p) & ((~r || (~q || s)) || q) & ((r & q & ~s) || (~p || ~q))
(~r || ~q || s || p) & (~r || ~q || s || q) & ((r & q & ~s) || (~p || ~q))
(~r || ~q || s || p) & (~r || ~q || s || q) & (~p || ~q || r) & (~p || ~q || q) & (~p || ~q || ~s)
(~r || ~q || s || p) & (~p || ~q || r) & (~p || ~q || ~s)

(~r || ~q || s || p) & (~r || ~q || s || q) & (~p || ~q || r) & (~p || ~q || q) & (~p || ~q || ~s)
(~r || ~q || s || p) & (~r || ~q || s || q) & (~p || ~q || r) & (~p || ~q || q) & (~p || ~q || ~s)

(~r || ~q || s || p) & (~r || ~q || s || q) & (~p || ~q || r) & (~p || ~q || q) & (~p || ~q || ~s)

(~(p & q) <=> (~r || (q => s)))

(~r || ~q || s || p) & (~p || ~q || r) & (~p || ~q || ~s)

# since we also removed bicoditionals and implications we don't need to check for them

# this means that the rhs is either a conjunction or disjunction

# so we need to apply de morgan's laws 

# now there are few cases to consider
# Case 1. ~(A & B)
# Case 2. ~(A || B)
# Case 3. ~(A & B & C)
# Case 4. ~(A || B || C)
# Case 5. ~(A & B || C) (illegal)
# Case 6. ~(A || B & C) (illegal)
# Case 7. ~(A & (~B & C)) -> ~A || (~B & C)
# Case 8. ~(A || ~(B || C))
# Case 9. ~(A & ~(B || C))
# Case 10. ~(A || ~(B & C))
# Case 11. ~(A & ~(B & ~(C & D)))
# Case 12. ~(A & ~(B & C) & D)

# The only cases that we want to apply de morgan's laws to are:
# Case 1. ~(A & B) -> ~A || ~B
# Case 2. ~(A || B) -> ~A & ~B
# Case 3. ~(A & B & C) -> ~A || ~B || ~C
# Case 4. ~(A || B || C) -> ~A & ~B & ~C

# Case 7 & 8 are interesting as the negation is removed so de morgan's law does it not apply later on

# ~(A & ~(B & C)) -> ~A || (B & C)
# ~(A || ~(B || C)) -> ~A & (B || C)

# Case 11 is interesting because it has another hit for de morgan's laws
# ~(A & ~(B & ~(C & D))) -> ~A || (B & ~(C & D)) -> ~A || (B & ~C || ~D)

# Case 12. ~(A & ~(B & C) & D) -> ~A || (B & C) || ~D

# If you hit inside first, it doesn't work because it can create a new case
# Case 12. ~(A & ~(B & C) & D) -> ~(A & (~B || ~C) & D) -> ~A || ~(~B || ~C) || ~D -> ~A || (B & C) || ~D
